--- pyborg-irc.py.orig	2007-05-04 00:34:33.000000000 -0700
+++ pyborg-irc.py	2009-07-28 18:06:36.000000000 -0700
@@ -21,6 +21,7 @@
 #
 
 import sys
+import re
 
 try:
 	from ircbot import *
@@ -50,6 +51,14 @@
 	"""
 	return time.strftime("%H:%M:%S", time.localtime(time.time()))
 
+def replace_insensitive(string, target, replacement):
+    no_case = string.lower()
+    index = no_case.find(target.lower())
+    if index >= 0:
+        result = string[:index] + replacement + string[index + len(target):]
+        return result
+    else: # no results so return the original string
+        return string
 
 class ModIRC(SingleServerIRCBot):
 	"""
@@ -68,23 +77,26 @@
 
 	# Command list for this module
 	commandlist =   "IRC Module Commands:\n!chans, !ignore, \
-!join, !nick, !part, !quit, !quitmsg, !reply2ignored, !replyrate, !shutup, \
-!stealth, !unignore, !wakeup, !talk, !owner"
+!join, !rejoin, !nick, !part, !quit, !quitmsg, !reply2ignored, !replyrate, !shutup, \
+!stealth, !unignore, !logging, !notify, !wakeup, !talk, !owner"
 	# Detailed command description dictionary
 	commanddict = {
-		"shutup": "Owner command. Usage: !shutup\nStop the bot talking",
+		"shutup": "Owner command. Usage: !shutup\nStop the bot from talking",
 		"wakeup": "Owner command. Usage: !wakeup\nAllow the bot to talk",
 		"join": "Owner command. Usage: !join #chan1 [#chan2 [...]]\nJoin one or more channels",
+		"rejoin": "Owner command. Usage: !rejoin [on|off]\nEnable or disable rejoining a channel after being kicked. Without arguments shows the current setting",
 		"part": "Owner command. Usage: !part #chan1 [#chan2 [...]]\nLeave one or more channels",
-		"chans": "Owner command. Usage: !chans\nList channels currently on",
+		"chans": "Owner command. Usage: !chans\nList channels currently joined",
 		"nick": "Owner command. Usage: !nick nickname\nChange nickname",
 		"ignore": "Owner command. Usage: !ignore [nick1 [nick2 [...]]]\nIgnore one or more nicknames. Without arguments it lists ignored nicknames",
 		"unignore": "Owner command. Usage: !unignore nick1 [nick2 [...]]\nUnignores one or more nicknames",
+		"logging": "Owner command. Usage: !logging [on|off]\nEnables or disables writing to a logfile",
+		"notify": "Owner command. Usage: !notify [on|off]\nEnables or disables private message and CTCP notifications to owners",
 		"replyrate": "Owner command. Usage: !replyrate [rate%]\nSet rate of bot replies to rate%. Without arguments (not an owner-only command) shows the current reply rate",
 		"reply2ignored": "Owner command. Usage: !reply2ignored [on|off]\nAllow/disallow replying to ignored users. Without arguments shows the current setting",
 		"stealth": "Owner command. Usage: !stealth [on|off]\nTurn stealth mode on or off (disable non-owner commands and don't return CTCP VERSION). Without arguments shows the current setting",
 		"quitmsg": "Owner command. Usage: !quitmsg [message]\nSet the quit message. Without arguments show the current quit message",
-		"talk": "Owner commande. Usage !talk nick message\nmake the bot send the sentence 'message' to 'nick'",
+		"talk": "Owner command. Usage !talk nick message\nmake the bot send the sentence 'message' to 'nick'",
 		"quit": "Owner command. Usage: !quit\nMake the bot quit IRC",
 		"owner": "Usage: !owner password\nAllow to become owner of the bot"
 	}
@@ -104,13 +116,17 @@
 			  "owners": ("Owner(s) nickname", [ "OwnerNick" ]),
 			  "servers": ("IRC Server to connect to (server, port [,password])", [("irc.starchat.net", 6667)]),
 			  "chans": ("Channels to auto-join", ["#test"]),
+			  "rejoin_kick": ("Rejoin channel when kicked out", 0),
+			  "logging": ("Enable or disable writing to a logfile", 0),
+			  "notify" : ("Enable or disable private message and CTCP notifications to owners", 1),
+			  "logfile": ("If logging is enabled, name of logfile", "log.txt"),
 			  "speaking": ("Allow the bot to talk on channels", 1),
 			  "stealth": ("Hide the fact we are a bot", 0),
 			  "ignorelist": ("Ignore these nicknames:", []),
 			  "reply2ignored": ("Reply to ignored people", 0),
 			  "reply_chance": ("Chance of reply (%) per message", 33),
 			  "quitmsg": ("IRC quit message", "Bye :-("),
-			  "password": ("password for control the bot (Edit manually !)", "")
+			  "password": ("password to control the bot (Edit manually !)", "")
 			} )
 
 		self.owners = self.settings.owners[:]
@@ -185,7 +201,11 @@
 			reason = ""
 
 		if kicked == self.settings.myname:
-			print "[%s] <--  %s was kicked off %s by %s (%s)" % (get_time(), kicked, target, kicker, reason)
+			if self.settings.rejoin_kick:
+				print "[%s] <--  %s was kicked off %s by %s (%s) (REJOINING)" % (get_time(), kicked, target, kicker, reason)
+				c.join(target)
+			else:
+				print "[%s] <--  %s was kicked off %s by %s (%s)" % (get_time(), kicked, target, kicker, reason)
 
 	def on_privmsg(self, c, e):
 		self.on_msg(c, e)
@@ -235,32 +255,80 @@
 				# Ignore all the other CTCPs
 				return
 
-		for irc_color_char in [',', "\x03"]:
-			debut = body.rfind(irc_color_char)
-			if 0 <= debut < 5:
-				x = 0
-				for x in xrange(debut+1, len(body)):
-					if body[x].isdigit() == 0:
+		color_char = 0 #Remove IRC color strings
+		while "\x03" in body:
+			color_char = body.rfind("\x03")
+			x = 0
+			i = 0
+			if color_char + 5 < len(body):
+				while i < 5:
+					if body[color_char+1].isdigit() or body[color_char+1] == ',':
+						body = body[:color_char+1] + body[color_char+2:]
+					else:
+						body = body[:color_char] + body[color_char+1:]
 						break
-				body = body[x:]
+					i += 1
+			elif color_char + 1 < len(body):
+				j = color_char+1
+				while j < len(body):
+					if body[color_char+1].isdigit() or body[color_char+1] == ',':
+						body = body[:color_char+1] + body[color_char+2:]
+					else:
+						body = body[:color_char] + body[color_char+1:]
+						break
+					j += 1
+			else:
+				body = body[:color_char] + body[color_char+1:]
 
 		#remove special irc fonts chars
-		body = body[body.rfind("\x02")+1:]
-		body = body[body.rfind("\xa0")+1:]
-
-		# WHOOHOOO!!
-		if target == self.settings.myname or source == self.settings.myname:
-			print "[%s] <%s> > %s> %s" % ( get_time(), source, target, body)
+		body = body.replace("\x02", "")
+		body = body.replace("\x1F", "")
+		body = body.replace("\x16", "")
+		body = body.replace("\x0F", "")
+		body = body.replace("\xa0", "")
 
 		# Ignore self.
 		if source == self.settings.myname: return
 
+		# Completely ignore lines beginning with ``
+		if body.startswith("``"):
+			print "Line ignored"
+			return
 
-		#replace nicknames by "#nick"
+		# We want replies reply_chance%, if speaking is on
+		replyrate = self.settings.speaking * self.settings.reply_chance
+
+		# Always reply to private messages
+		if e.eventtype() == "privmsg":
+			replyrate = 100
+
+		# double reply chance if the text contains our nickname :-)
+		if body.lower().find(self.settings.myname.lower() ) != -1:
+			replyrate = replyrate * 2
+
+		# Replace nicknames with "#nick", but don't mangle normal body text.
 		if e.eventtype() == "pubmsg":
 			for x in self.channels[target].users():
-				body = body.replace(x, "#nick")
-		print body
+				if len(x) > 2: # Don't bother with tiny words
+					if x.startswith(('&', '@', '%', '+', '~')): # Strip usermode symbols
+						x = x[1:]
+					body = replace_insensitive(body, ' ' + x + ' ', ' #nick ')
+					tupunc = 0
+					while tupunc < len(string.punctuation):
+						puncind = tuple(string.punctuation)[tupunc]
+						body = replace_insensitive(body, ' ' + x + puncind, ' #nick' + puncind)
+						body = replace_insensitive(body, puncind + x + ' ', puncind + '#nick ')
+						if body.lower().startswith(x.lower() + puncind):
+							body = '#nick' + puncind + body[len(x)+1:]
+						tupunc += 1
+					if body.lower() == x.lower():
+						body = '#nick'
+					if body.lower().startswith(x.lower() + ' '):
+						body = '#nick ' + body[len(x)+1:]
+					if body.lower().endswith(' ' + x.lower()):
+						body = body[:(len(body))-(len(x)+1)] + ' #nick'
+
+		print "[%s] <%s> > %s> %s" % ( get_time(), source, target, body)
 
 		# Ignore selected nicks
 		if self.settings.ignorelist.count(source.lower()) > 0 \
@@ -279,26 +347,19 @@
 		if body == "":
 			return
 
+		# If logging is on, write body to logfile
+		if self.settings.logging:
+			loghandle = open(self.settings.logfile, 'a')
+			loghandle.write("[%s] <%s> > %s> %s\n" % ( get_time(), source, target, body))
+
 		# Ignore quoted messages
 		if body[0] == "<" or body[0:1] == "\"" or body[0:1] == " <":
 			print "Ignoring quoted text"
 			return
 
-		# We want replies reply_chance%, if speaking is on
-		replyrate = self.settings.speaking * self.settings.reply_chance
-
-		# double reply chance if the text contains our nickname :-)
-		if body.lower().find(self.settings.myname.lower() ) != -1:
-			replyrate = replyrate * 2
-
-		# Always reply to private messages
-		if e.eventtype() == "privmsg":
-			replyrate = 100
-
-			# Parse ModIRC commands
-			if body[0] == "!":
-				if self.irc_commands(body, source, target, c, e) == 1:return
-
+		# Parse ModIRC commands
+		if body[0] == "!":
+			if self.irc_commands(body, source, target, c, e) == 1:return
 
 		# Pass message onto pyborg
 		if source in self.owners and e.source() in self.owner_mask:
@@ -355,6 +416,57 @@
 						msg = msg + "off"
 						self.settings.stealth = 0
 
+			# Enable/disable logging
+			elif command_list[0] == "!logging":
+				msg = "Logging "
+				if len(command_list) == 1:
+					if self.settings.logging == 0:
+						msg = msg + "off"
+					else:
+						msg = msg + "on"
+				else:
+					toggle = command_list[1].lower()
+					if toggle == "on":
+						msg = msg + "on"
+						self.settings.logging = 1
+					else:
+						msg = msg + "off"
+						self.settings.logging = 0
+
+			# Enable/disable notifications
+			elif command_list[0] == "!notify":
+				msg = "Notifications "
+				if len(command_list) == 1:
+					if self.settings.notify == 0:
+						msg = msg + "off"
+					else:
+						msg = msg + "on"
+				else:
+					toggle = command_list[1].lower()
+					if toggle == "on":
+						msg = msg + "on"
+						self.settings.notify = 1
+					else:
+						msg = msg + "off"
+						self.settings.notify = 0
+
+			# Enable/disable rejoin on kick
+			elif command_list[0] == "!rejoin":
+				msg = "Rejoin setting "
+				if len(command_list) == 1:
+					if self.settings.rejoin_kick == 0:
+						msg = msg + "off"
+					else:
+						msg = msg + "on"
+				else:
+					toggle = command_list[1].lower()
+					if toggle == "on":
+						msg = msg + "on"
+						self.settings.rejoin_kick = 1
+					else:
+						msg = msg + "off"
+						self.settings.rejoin_kick = 0
+
 			# filter mirc colours out?
 			elif command_list[0] == "!nocolor" or command_list[0] == "!nocolour":
 				msg = "obsolete command "
@@ -456,8 +568,11 @@
 			# Change reply rate
 			elif command_list[0] == "!replyrate":
 				try:
-					self.settings.reply_chance = int(command_list[1])
-					msg = "Now replying to %d%% of messages." % int(command_list[1])
+					if int(command_list[1]) > 100:
+						self.settings.reply_chance = 100
+					else:
+						self.settings.reply_chance = int(command_list[1])
+					msg = "Now replying to %d%% of messages." % self.settings.reply_chance
 				except:
 					msg = "Reply rate is %d%%." % self.settings.reply_chance
 			#make the bot talk
@@ -514,16 +629,18 @@
 				c.privmsg(source, message)
 				# send copy to owner
 				if not source in self.owners:
-					c.privmsg(','.join(self.owners), "(From "+source+") "+body)
-					c.privmsg(','.join(self.owners), "(To   "+source+") "+message)
+					if self.settings.notify:
+						c.privmsg(','.join(self.owners), "(From "+source+") "+body)
+						c.privmsg(','.join(self.owners), "(To   "+source+") "+message)
 			# ctcp action priv msg
 			else:
 				print "[%s] <%s> > %s> /me %s" % ( get_time(), self.settings.myname, target, message)
 				c.action(source, message)
 				# send copy to owner
 				if not source in self.owners:
-					map ( ( lambda x: c.action(x, "(From "+source+") "+body) ), self.owners)
-					map ( ( lambda x: c.action(x, "(To   "+source+") "+message) ), self.owners)
+					if self.settings.notify:
+						map ( ( lambda x: c.action(x, "(From "+source+") "+body) ), self.owners)
+						map ( ( lambda x: c.action(x, "(To   "+source+") "+message) ), self.owners)
 
 if __name__ == "__main__":
 	
