--- pyborg-irc.py.orig	2007-05-04 00:34:33.000000000 -0700
+++ pyborg-irc.py	2009-06-24 15:34:35.000000000 -0700
@@ -68,15 +68,16 @@
 
 	# Command list for this module
 	commandlist =   "IRC Module Commands:\n!chans, !ignore, \
-!join, !nick, !part, !quit, !quitmsg, !reply2ignored, !replyrate, !shutup, \
+!join, !rejoin, !nick, !part, !quit, !quitmsg, !reply2ignored, !replyrate, !shutup, \
 !stealth, !unignore, !wakeup, !talk, !owner"
 	# Detailed command description dictionary
 	commanddict = {
-		"shutup": "Owner command. Usage: !shutup\nStop the bot talking",
+		"shutup": "Owner command. Usage: !shutup\nStop the bot from talking",
 		"wakeup": "Owner command. Usage: !wakeup\nAllow the bot to talk",
 		"join": "Owner command. Usage: !join #chan1 [#chan2 [...]]\nJoin one or more channels",
+		"rejoin": "Owner command. Usage: !rejoin [on|off]\nEnable or disable rejoining a channel after being kicked. Without arguments shows the current setting",
 		"part": "Owner command. Usage: !part #chan1 [#chan2 [...]]\nLeave one or more channels",
-		"chans": "Owner command. Usage: !chans\nList channels currently on",
+		"chans": "Owner command. Usage: !chans\nList channels currently joined",
 		"nick": "Owner command. Usage: !nick nickname\nChange nickname",
 		"ignore": "Owner command. Usage: !ignore [nick1 [nick2 [...]]]\nIgnore one or more nicknames. Without arguments it lists ignored nicknames",
 		"unignore": "Owner command. Usage: !unignore nick1 [nick2 [...]]\nUnignores one or more nicknames",
@@ -84,7 +85,7 @@
 		"reply2ignored": "Owner command. Usage: !reply2ignored [on|off]\nAllow/disallow replying to ignored users. Without arguments shows the current setting",
 		"stealth": "Owner command. Usage: !stealth [on|off]\nTurn stealth mode on or off (disable non-owner commands and don't return CTCP VERSION). Without arguments shows the current setting",
 		"quitmsg": "Owner command. Usage: !quitmsg [message]\nSet the quit message. Without arguments show the current quit message",
-		"talk": "Owner commande. Usage !talk nick message\nmake the bot send the sentence 'message' to 'nick'",
+		"talk": "Owner command. Usage !talk nick message\nmake the bot send the sentence 'message' to 'nick'",
 		"quit": "Owner command. Usage: !quit\nMake the bot quit IRC",
 		"owner": "Usage: !owner password\nAllow to become owner of the bot"
 	}
@@ -104,13 +105,14 @@
 			  "owners": ("Owner(s) nickname", [ "OwnerNick" ]),
 			  "servers": ("IRC Server to connect to (server, port [,password])", [("irc.starchat.net", 6667)]),
 			  "chans": ("Channels to auto-join", ["#test"]),
+			  "rejoin_kick": ("Rejoin channel when kicked out", 0),
 			  "speaking": ("Allow the bot to talk on channels", 1),
 			  "stealth": ("Hide the fact we are a bot", 0),
 			  "ignorelist": ("Ignore these nicknames:", []),
 			  "reply2ignored": ("Reply to ignored people", 0),
 			  "reply_chance": ("Chance of reply (%) per message", 33),
 			  "quitmsg": ("IRC quit message", "Bye :-("),
-			  "password": ("password for control the bot (Edit manually !)", "")
+			  "password": ("password to control the bot (Edit manually !)", "")
 			} )
 
 		self.owners = self.settings.owners[:]
@@ -185,7 +187,11 @@
 			reason = ""
 
 		if kicked == self.settings.myname:
-			print "[%s] <--  %s was kicked off %s by %s (%s)" % (get_time(), kicked, target, kicker, reason)
+			if self.settings.rejoin_kick:
+				print "[%s] <--  %s was kicked off %s by %s (%s) (REJOINING)" % (get_time(), kicked, target, kicker, reason)
+				c.join(target)
+			else:
+				print "[%s] <--  %s was kicked off %s by %s (%s)" % (get_time(), kicked, target, kicker, reason)
 
 	def on_privmsg(self, c, e):
 		self.on_msg(c, e)
@@ -235,18 +241,37 @@
 				# Ignore all the other CTCPs
 				return
 
-		for irc_color_char in [',', "\x03"]:
-			debut = body.rfind(irc_color_char)
-			if 0 <= debut < 5:
-				x = 0
-				for x in xrange(debut+1, len(body)):
-					if body[x].isdigit() == 0:
+		color_char = 0 #Remove IRC color strings
+		while "\x03" in body:
+			color_char = body.rfind("\x03")
+			x = 0
+			i = 0
+			if color_char + 5 < len(body):
+				while i < 5:
+					if body[color_char+1].isdigit() or body[color_char+1] == ',':
+						body = body[:color_char+1] + body[color_char+2:]
+					else:
+						body = body[:color_char] + body[color_char+1:]
 						break
-				body = body[x:]
+					i += 1
+			elif color_char + 1 < len(body):
+				j = color_char+1
+				while j < len(body):
+					if body[color_char+1].isdigit() or body[color_char+1] == ',':
+						body = body[:color_char+1] + body[color_char+2:]
+					else:
+						body = body[:color_char] + body[color_char+1:]
+						break
+					j += 1
+			else:
+				body = body[:color_char] + body[color_char+1:]
 
 		#remove special irc fonts chars
-		body = body[body.rfind("\x02")+1:]
-		body = body[body.rfind("\xa0")+1:]
+		body = body.replace("\x02", "")
+		body = body.replace("\x1F", "")
+		body = body.replace("\x16", "")
+		body = body.replace("\x0F", "")
+		body = body.replace("\xa0", "")
 
 		# WHOOHOOO!!
 		if target == self.settings.myname or source == self.settings.myname:
@@ -255,11 +280,31 @@
 		# Ignore self.
 		if source == self.settings.myname: return
 
+		# Completely ignore lines beginning with ``
+		if body.startswith("``"):
+			print "Line ignored"
+			return
+
+		# We want replies reply_chance%, if speaking is on
+		replyrate = self.settings.speaking * self.settings.reply_chance
+
+		# Always reply to private messages
+		if e.eventtype() == "privmsg":
+			replyrate = 100
+
+		# double reply chance if the text contains our nickname :-)
+		if body.lower().find(self.settings.myname.lower() ) != -1:
+			replyrate = replyrate * 2
 
-		#replace nicknames by "#nick"
+		# Replace nicknames with "#nick", but don't mangle normal body text.
 		if e.eventtype() == "pubmsg":
 			for x in self.channels[target].users():
-				body = body.replace(x, "#nick")
+				if len(x) > 2: # Don't bother with tiny words
+					body = body.replace(' ' + x + ' ', ' #nick ')
+					if body.startswith(x + ' '):
+						body = '#nick ' + body[len(x)+1:]
+					if body.endswith(' ' + x):
+						body = body[:(len(body))-(len(x)+1)] + ' #nick'
 		print body
 
 		# Ignore selected nicks
@@ -284,21 +329,9 @@
 			print "Ignoring quoted text"
 			return
 
-		# We want replies reply_chance%, if speaking is on
-		replyrate = self.settings.speaking * self.settings.reply_chance
-
-		# double reply chance if the text contains our nickname :-)
-		if body.lower().find(self.settings.myname.lower() ) != -1:
-			replyrate = replyrate * 2
-
-		# Always reply to private messages
-		if e.eventtype() == "privmsg":
-			replyrate = 100
-
-			# Parse ModIRC commands
-			if body[0] == "!":
-				if self.irc_commands(body, source, target, c, e) == 1:return
-
+		# Parse ModIRC commands
+		if body[0] == "!":
+			if self.irc_commands(body, source, target, c, e) == 1:return
 
 		# Pass message onto pyborg
 		if source in self.owners and e.source() in self.owner_mask:
@@ -355,6 +388,23 @@
 						msg = msg + "off"
 						self.settings.stealth = 0
 
+			# Enable/disable rejoin on kick
+			elif command_list[0] == "!rejoin":
+				msg = "Rejoin setting "
+				if len(command_list) == 1:
+					if self.settings.rejoin_kick == 0:
+						msg = msg + "off"
+					else:
+						msg = msg + "on"
+				else:
+					toggle = command_list[1].lower()
+					if toggle == "on":
+						msg = msg + "on"
+						self.settings.rejoin_kick = 1
+					else:
+						msg = msg + "off"
+						self.settings.rejoin_kick = 0
+
 			# filter mirc colours out?
 			elif command_list[0] == "!nocolor" or command_list[0] == "!nocolour":
 				msg = "obsolete command "
