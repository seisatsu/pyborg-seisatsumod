--- pyborg.py.orig	2007-11-11 21:49:28.000000000 -0800
+++ pyborg.py	2009-06-24 15:43:31.000000000 -0700
@@ -66,6 +66,28 @@
 	except ValueError, e:
 		pass
 
+	try:
+		while 1:
+			index = message.index("[", index)
+			# Remove matching ] bracket
+			i = message.index("]", index+1)
+			message = message[0:i]+message[i+1:]
+			# And remove the [
+			message = message[0:index]+message[index+1:]
+	except ValueError, e:
+		pass
+
+	try:
+		while 1:
+			index = message.index("<", index)
+			# Remove matching > bracket
+			i = message.index(">", index+1)
+			message = message[0:i]+message[i+1:]
+			# And remove the <
+			message = message[0:index]+message[index+1:]
+	except ValueError, e:
+		pass
+
 	message = message.replace(";", ",")
 	message = message.replace("?", " ? ")
 	message = message.replace("!", " ! ")
@@ -100,7 +122,7 @@
 	import re
 	import cfgfile
 
-	ver_string = "I am a version 1.1.0 PyBorg"
+	ver_string = "I am a version 1.1.2 PyBorg, with Seisatsu's Mod v3.2"
 	saves_version = "1.1.0"
 
 	# Main command list
@@ -134,14 +156,14 @@
 		self.settings.load("pyborg.cfg",
 			{ "num_contexts": ("Total word contexts", 0),
 			  "num_words":	("Total unique words known", 0),
-			  "max_words":	("max limits in the number of words known", 6000),
+			  "max_words":	("max limit in the number of words known", 6000),
 			  "learning":	("Allow the bot to learn", 1),
 			  "ignore_list":("Words that can be ignored for the answer", ['!.', '?.', "'", ',', ';']),
-			  "censored":	("Don't learn the sentence if one of those words is found", []),
-			  "num_aliases":("Total of aliases known", 0),
-			  "aliases":	("A list of similars words", {}),
-			  "process_with":("Wich way for generate the reply ( pyborg|megahal)", "pyborg"),
-			  "no_save"	:("If True, Pyborg don't saves the dictionary and configuration on disk", "False")
+			  "censored":	("Don't learn the sentence if one of these words is found", []),
+			  "num_aliases":("Total aliases known", 0),
+			  "aliases":	("A list of similar words", {}),
+			  "process_with":("Which way to generate the reply ( pyborg|megahal)", "pyborg"),
+			  "no_save"	:("If True, Pyborg doesn't save the dictionary and configuration on disk", "False")
 			} )
 
 		self.answers = self.cfgfile.cfgset()
@@ -255,7 +277,7 @@
 					file.write(data)
 					file.close()
 			except (OSError, IOError), e:
-				print "no zip found. Is the programm launch for first time ?"
+				print "no zip found. Is the program launching for the first time ?"
 
 
 			f = open("words.dat", "wb")
@@ -569,7 +591,7 @@
 				for w in liste[0:]:
 					self.unlearn(w)
 
-				msg = "Purge dictionary in %0.2fs. %d words removed" % \
+				msg = "Purged dictionary in %0.2fs. %d words removed" % \
 						(time.time()-t,
 						compteur)
 				
@@ -699,7 +721,7 @@
 				elif len(command_list) == 2:
 					if command_list[1][0] != '~': command_list[1] = '~' + command_list[1]
 					if command_list[1] in self.settings.aliases.keys():
-						msg = "Thoses words : %s  are aliases to %s" \
+						msg = "These words : %s  are aliases to %s" \
 						% ( " ".join(self.settings.aliases[command_list[1]]), command_list[1] )
 					else:
 						msg = "The alias %s is not known" % command_list[1][1:]
@@ -996,7 +1018,8 @@
 		for x in xrange(0, len(sentence)):
 			if sentence[x] == "'":
 				sentence[x-1] = ""
-				sentence[x+1] = ""
+				if x + 1 <= len(sentence):
+					sentence[x+1] = ""
 			if sentence[x] == ",":
 				sentence[x-1] = ""
 
